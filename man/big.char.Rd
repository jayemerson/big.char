% Generated by roxygen2 (4.0.2): do not edit by hand
\name{big.char}
\alias{big.char}
\title{Create a big.char object!}
\usage{
big.char(length, maxchar = 8, init = NULL, names = NULL,
  backingfile = NULL, backingpath = NULL, descriptorfile = NULL,
  binarydescriptor = FALSE, shared = TRUE)
}
\arguments{
\item{length}{the vector length}

\item{maxchar}{the maximum length of the strings, 8 by default}

\item{init}{an optional string for initialization purposes}

\item{names}{optional names, which would be dangerous for long vectors}

\item{backingfile}{optional name of binary memory-mapped file}

\item{backingpath}{should be obvious, right?}

\item{descriptorfile}{the descriptor file associated with the backingfile}

\item{binarydescriptor}{see \code{\link[bigmemory]{big.matrix}}}

\item{shared}{see \code{\link[bigmemory]{big.matrix}}}
}
\value{
Returns a \code{big.char} object
}
\description{
Create a \code{big.char} vector of strings
}
\details{
This is the full set of details for documentation.

big.char only currently supports the basic ASCII character set,
with numeric values up to 127.  And surprising things may happen
with special characters like tab and end-of-line;
of course they look like two characters, but are really one.
And surprising things may happen with ASCII codes for things like
DELETE.  If someone had the value 127 in a big.char data structure,
this would then extract as the octal code \177 for DELETE, also
a single character value.  At this point, our goal is to support
characters as you would expect in data analysis 99.9% of the time.
}
\examples{
x <- big.char(5, 3, init="ABC")
x[]
x[1] <- ""

# The following triggers a warning because of the truncation:
x[-1] <- c(NA, "*", "--", "DEFG")
x[]
}
\author{
Jay Emerson
}
\references{
None.
}
\seealso{
\code{\link[bigmemory]{big.matrix}}
}
\keyword{datasets}

